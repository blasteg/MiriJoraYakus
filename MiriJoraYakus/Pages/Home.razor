@page "/"
@using MiriJoraYakus.Enums
@using MiriJoraYakus.Data
@inject IJSRuntime JsRuntime
<style>
    img.cardGrid {
        max-width: 100%;
        height: auto;
        max-height: 100%;
    }

    img.dimmed {
        filter: brightness(25%)
    }

    img.unseen {
        filter: opacity(0.4)
    }

    div.hidingUnits {
        display: none
    }

    td.UnitGrids {
        height: 75px
    }

    td.WCGrids {
        height: 50px
    }

    td.unitSettingGrids {
        height: 50px
    }

    tr.disabledUnit {
        background-color: lightgrey;
        filter: brightness(50%)
    }

    div.unitSettingBG
    {
        background-color: black;
        color:white;
    }
</style>
<PageTitle>ミリドンジャラ支援サイト</PageTitle>
<div class="row">
    <div class="col-md-7">
        <h3>手札 Hand</h3>
        <table>
            <tr>
                @for (int i = 0; i < maxHandSize; i++)
                {
                    int n = i;
                    <td>
                        <img class="cardGrid" src=@("/IdolIcons/"+ (int)(hand.Count>i?hand.ElementAt(n):0)+".png")
                             @onclick="()=>RemoveFromHand(n)" />
                    </td>
                }
            </tr>
        </table>
        (Click to Discard クリックは捨てる)
        <hr>
        Left Click: Add to Hand; Right Click: Toggle whether card is still available
        <br />
        左クリック:手札に加える; 右クリックで山か河に置く/戻す
        <table style=" width:100%">
            @for (int i = 0; i < totalCards / perRow; i++)
            {
                <tr>
                    @for (int j = 0; j < perRow; j++)
                    {
                        int n = i * perRow + j + 1;
                        if (n <= totalCards)
                        {
                            <td>
                                <img class="cardGrid @(available[(CardEnum)n]?"normal":"dimmed")" src=@("/IdolIcons/"+(n)+".png")
                                     @oncontextmenu="()=>ToggleAvailable(n)" @oncontextmenu:preventDefault="true" @onclick="()=>AddToHand(n)" />
                            </td>
                        }
                    }
                </tr>
            }
            <tr>
                <td>
                    <img class="cardGrid @(available[CardEnum.PrWC]?"normal":"dimmed")" src=@("/IdolIcons/53.png")
                         @oncontextmenu="()=>ToggleAvailable((int)CardEnum.PrWC)" @oncontextmenu:preventDefault="true" @onclick="()=>AddToHand((int)CardEnum.PrWC)" />
                </td>
                <td>
                    <img class="cardGrid @(available[CardEnum.FaWC]?"normal":"dimmed")" src=@("/IdolIcons/54.png")
                         @oncontextmenu="()=>ToggleAvailable((int)CardEnum.FaWC)" @oncontextmenu:preventDefault="true" @onclick="()=>AddToHand((int)CardEnum.FaWC)" />
                </td>
                <td>
                    <img class="cardGrid @(available[CardEnum.AnWC]?"normal":"dimmed")" src=@("/IdolIcons/55.png")
                         @oncontextmenu="()=>ToggleAvailable((int)CardEnum.AnWC)" @oncontextmenu:preventDefault="true" @onclick="()=>AddToHand((int)CardEnum.AnWC)" />
                </td>
                <td>
                    <img class="cardGrid @(available[CardEnum.AllWC]?"normal":"dimmed")" src=@("/IdolIcons/56.png")
                         @oncontextmenu="()=>ToggleAvailable((int)CardEnum.AllWC)" @oncontextmenu:preventDefault="true" @onclick="()=>AddToHand((int)CardEnum.AllWC)" />
                </td>
            </tr>
        </table>
    </div>
    <div class="col-md-5">
        <div class="unitSettingBG">
        <h3>Unit Setting ユニット設置 <a @onclick="()=>unitSettingExpanded=!unitSettingExpanded">@(unitSettingExpanded ? "⮟" : "⮞")</a></h3>
        <div class="@(unitSettingExpanded?"showingUnits":"hidingUnits")" style="overflow-y:scroll; height:90vh; width:95%">
            @foreach (var groups in potentialUnits.GroupBy(x => x.Tags))
            {
                if (unitTagExpanded.ContainsKey(groups.Key) == false)
                {
                    unitTagExpanded.Add(groups.Key, false);
                }
                <hr >
                <h4>@groups.Key<a @onclick="()=>ToggleTagExpand(groups.Key)">@(unitTagExpanded[groups.Key] ? "⮟" : "⮞")</a></h4>
                <div class="@(unitTagExpanded[groups.Key]?"showingUnits":"hidingUnits")">
                    <table>
                        @foreach (var a in groups)
                        {
                            <tr style="border-top: solid 2px; height:80px">
                                <td>
                                    <InputCheckbox @bind-Value=a.IsEnabled></InputCheckbox>
                                </td>
                                <td>@a.Name</td>
                                @foreach (var b in a?.Idols ?? new List<CardEnum>())
                                {
                                    <td class="unitSettingGrids">
                                        <img class="cardGrid" src=@("/IdolIcons/"+ (int)(b)+".png") />
                                    </td>
                                }
                            </tr>

                        }
                    </table>
                </div>
            }
            </div>
        </div>
        @foreach (var groups in potentialUnits.GroupBy(x => x.TotalCount).OrderByDescending(x => x.Key))
        {
            if (unitExpanded.ContainsKey(groups.Key) == false)
            {
                unitExpanded.Add(groups.Key, false);
            }
            <hr />
            <h3>@groups.Key Card Units <a @onclick="()=>ToggleExpand(groups.Key)">@(unitExpanded[groups.Key] ? "⮟" : "⮞")</a></h3>
            <div class="@(unitExpanded[groups.Key]?"showingUnits":"hidingUnits")" style="overflow-y:scroll; height:400px; width:95%">
                <table>
                    @foreach (var a in groups.OrderByDescending(x => x.IsEnabled).ThenByDescending(x => x.Have).ThenBy(x => x.Gone))
                    {
                        <tr style="border-top: solid 2px; height:80px" class="@(a.IsEnabled?"enabledUnit":"disabledUnit")">
                            <td>@a?.Name <br /> @a?.Have / @a?.TotalCount</td>
                            <td></td>
                            @foreach (var b in a?.Idols ?? new List<CardEnum>())
                            {
                                <td class="UnitGrids">
                                    <img class="cardGrid @(hand.Any(x=>x==b)?"normal" : available[b]? "unseen" : "dimmed" )" src=@("/IdolIcons/"+ (int)(b)+".png") />
                                </td>
                            }
                        </tr>
                        if (a?.PrWC + a?.AnWC + a?.FaWC + a?.AllWC > 0)
                        {
                            //Display Wildcards
                            <tr class="@(a.IsEnabled?"enabledUnit":"disabledUnit")">
                                <td></td>
                                <td class="WCGrids">+</td>
                                @for (int i = 0; i < a?.PrWC; i++)
                                {
                                    <td class="WCGrids">
                                        <img class="cardGrid normal" src=@("/IdolIcons/"+ (int)(CardEnum.PrWC)+".png") />
                                    </td>
                                }
                                @for (int i = 0; i < a?.FaWC; i++)
                                {
                                    <td class="WCGrids">
                                        <img class="cardGrid normal" src=@("/IdolIcons/"+ (int)(CardEnum.FaWC)+".png") />
                                    </td>
                                }
                                @for (int i = 0; i < a?.AnWC; i++)
                                {
                                    <td class="WCGrids">
                                        <img class="cardGrid normal" src=@("/IdolIcons/"+ (int)(CardEnum.AnWC)+".png") />
                                    </td>
                                }
                                @for (int i = 0; i < a?.AllWC; i++)
                                {
                                    <td class="WCGrids">
                                        <img class="cardGrid normal" src=@("/IdolIcons/"+ (int)(CardEnum.AllWC)+".png") />
                                    </td>
                                }
                            </tr>
                        }
                    }
                </table>
            </div>
        }
    </div>
</div>
@code {
    List<CardEnum> hand = new List<CardEnum>();
    private int maxHandSize = 9;
    private int totalCards = 52;
    private int perRow = 13;
    private Dictionary<CardEnum, bool> available = new Dictionary<CardEnum, bool>();
    private List<UnitEvaluator> potentialUnits = new List<UnitEvaluator>();
    private Dictionary<int, bool> unitExpanded = new Dictionary<int, bool>();
    private Dictionary<string, bool> unitTagExpanded = new Dictionary<string, bool>();
    public bool unitSettingExpanded = false;
    protected override async Task OnInitializedAsync()
    {
        foreach (CardEnum a in Enum.GetValues(typeof(CardEnum)))
        {
            available[a] = true;
        }
        GlobalDatas.BaseUnitData.ForEach(x => potentialUnits.Add(new UnitEvaluator(x)));
    }
    private void ToggleAvailable(int n)
    {
        available[(CardEnum)n] = !available[(CardEnum)n];
        hand.RemoveAll(x => x == (CardEnum)n);
        EvaluateHand();
        StateHasChanged();
    }
    private void AddToHand(int n)
    {
        if (hand.Count >= maxHandSize)
        {
            JsRuntime.InvokeVoidAsync("alert", "Hand is Full");
            return;
        }
        else
        {
            if (available[(CardEnum)n])
            {
                hand.Add((CardEnum)n);
                EvaluateHand();
                StateHasChanged();
            }
        }
    }
    private void RemoveFromHand(int n)
    {
        if (hand.Count > n)
        {
            hand.RemoveAt(n);
            EvaluateHand();
        }
    }
    private void EvaluateHand()
    {
        potentialUnits.ForEach(x =>
        {
            var ownedCards = hand.Intersect(x.Idols).ToList();
            x.TypeHave[TypeEnum.Princess] = 0;
            x.TypeHave[TypeEnum.Fairy] = 0;
            x.TypeHave[TypeEnum.Angel] = 0;
            ownedCards.ForEach(y => x.TypeHave[y.Type()]++);
            x.PrWC = int.Min(x.TypeCount[TypeEnum.Princess] - x.TypeHave[TypeEnum.Princess], hand.Count(y => y == CardEnum.PrWC));
            x.FaWC = int.Min(x.TypeCount[TypeEnum.Fairy] - x.TypeHave[TypeEnum.Fairy], hand.Count(y => y == CardEnum.FaWC));
            x.AnWC = int.Min(x.TypeCount[TypeEnum.Angel] - x.TypeHave[TypeEnum.Angel], hand.Count(y => y == CardEnum.AnWC));
            x.Have = ownedCards.Count + x.PrWC + x.FaWC + x.AnWC;
            x.Gone = x.Idols.Count(y => available[y] == false) - x.PrWC - x.FaWC - x.AnWC;
            x.AllWC = int.Min(hand.Count(y => y == CardEnum.AllWC), x.TotalCount - x.Have);
            x.Have = x.Have + x.AllWC;
            x.Gone = x.Gone - x.AllWC;
        });
    }
    private void ToggleExpand(int n)
    {
        if (unitExpanded.ContainsKey(n))
        {
            unitExpanded[n] = !unitExpanded[n];
            StateHasChanged();
        }
    }
    private void ToggleTagExpand(string n)
    {
        if (unitTagExpanded.ContainsKey(n))
        {
            unitTagExpanded[n] = !unitTagExpanded[n];
            StateHasChanged();
        }
    }
}