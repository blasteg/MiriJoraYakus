@page "/"
@using MiriJoraYakus.Enums
@inject IJSRuntime JsRuntime
<style>
    img.cardGrid {
        max-width: 100%;
        height: auto;
        max-height: 100%;
    }

    img.dimmed {
        filter: brightness(25%)
    }
</style>
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<table>
    <tr>
        @for (int i = 0; i < maxHandSize; i++)
        {
            int n = i;
            <td>
                <img class="cardGrid" src=@("/IdolIcons/"+ (int)(hand.Count>i?hand.ElementAt(n):0)+".png")
                     @onclick="()=>RemoveFromHand(n)" />
            </td>
        }
    </tr>
</table>
Welcome to your new app.
<hr>
<table style=" width:100%">
    @for (int i = 0; i < totalCards / perRow; i++)
    {
        <tr>
            @for (int j = 0; j < perRow; j++)
            {
                int n = i * perRow + j;
                if (n < totalCards)
                {
                    <td>
                        <img class="cardGrid @(available[(IdolEnum)n+1]?"normal":"dimmed")" src=@("/IdolIcons/"+(n+1)+".png")
                             @oncontextmenu="()=>ToggleAvailable(n+1)" @oncontextmenu:preventDefault="true" @onclick="()=>AddToHand(n+1)" />
                    </td>
                }
            }
        </tr>
    }
</table>
@code {
    List<CardEnum> hand = new List<CardEnum>();
    private int maxHandSize = 9;
    private int totalCards = 52;
    private int perRow = 13;
    private Dictionary<IdolEnum, bool> available = new Dictionary<IdolEnum, bool>();
    protected override async Task OnInitializedAsync()
    {
        foreach (IdolEnum a in Enum.GetValues(typeof(IdolEnum)))
        {
            available[a] = true;
        }
    }
    private void ToggleAvailable(int n)
    {
        available[(IdolEnum)n] = !available[(IdolEnum)n];
        StateHasChanged();
    }
    private void AddToHand(int n)
    {
        if (hand.Count >= maxHandSize)
        {
            JsRuntime.InvokeVoidAsync("alert", "Hand is Full");
            return;
        }
        else
        {
            if (available[(IdolEnum)n])
            {
                hand.Add((CardEnum)n);
                StateHasChanged();
            }
        }
    }
    private void RemoveFromHand(int n)
    {
        if (hand.Count > n)
            hand.RemoveAt(n);
    }
}